#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */
// Normalise le port et utilise celui défini dans les variables d'environnement
// ou 3000 par défaut
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
// Crée le serveur HTTP basé sur notre application Express
const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
// Démarre le serveur sur le port défini
server.listen(port);
// Configuration des gestionnaires d'événements
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
// Fonction utilitaire pour normaliser le port
function normalizePort(val) {
  const port = parseInt(val, 10);

  // Si ce n'est pas un nombre, on retourne la valeur telle quelle
  // (cas des sockets nommés, par exemple)
  if (isNaN(port)) {
    return val;
  }

  // Si c'est un nombre positif, on le retourne comme numéro de port
  if (port >= 0) {
    return port;
  }

  // Sinon, on retourne false
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
// Gestion des erreurs spécifiques au démarrage du serveur
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Gestion des erreurs spécifiques avec des messages conviviaux
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
// Gestionnaire d'événement lorsque le serveur commence à écouter
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  
  // Journalisation avec debug si activé
  debug('Listening on ' + bind);
  
  // Message console standard pour informer du démarrage
  console.log(`Server running on ${bind}`);
}